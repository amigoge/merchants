<!DOCTYPE html>
<html>
<head>
  <title><%= typeof title == 'undefined' ? 'New Sails App' : title %></title>

  <!-- Viewport mobile tag for sensible mobile support -->
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


  <!--
	  Stylesheets and Preprocessors
	  ==============================

	  You can always bring in CSS files manually with `<link>` tags, or asynchronously
	  using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
	  of Sails' conventional asset pipeline (boilerplate Gruntfile).

	  By default, stylesheets from your `assets/styles` folder are included
	  here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
	  are supported. In production, your styles will be minified and concatenated into
	  a single file.

	  To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
	  For example, here are a few things you could do:

		  + Change the order of your CSS files
		  + Import stylesheets from other directories
		  + Use a different or additional preprocessor, like SASS, SCSS or Stylus
  -->

  <!--STYLES-->
  <link rel="stylesheet" href="/styles/importer.css">
  <!--STYLES END-->
</head>

<body>
<div id="app">
  <b-container>
    <!--navbar-->
    <!--navbar-->
    <b-navbar toggleable="md" type="dark" variant="dark">
      <b-nav-toggle target="nav_collapse"></b-nav-toggle>
      <b-navbar-brand href="/Market">市集系統</b-navbar-brand>

      <b-collapse is-nav id="nav_collapse">
        <b-nav is-nav-bar>
          <!--<b-nav-item href="/Merchant">招商資訊</b-nav-item>-->
          <!--<b-nav-item href="/Market">市集資訊</b-nav-item>-->
          <b-nav-item href="/">後台管理</b-nav-item>
        </b-nav>

        <!-- Right aligned nav items -->
        <b-nav is-nav-bar class="ml-auto">
          <b-nav-form>
            <b-form-input size="sm" class="mr-sm-2" type="text" placeholder="搜尋"/>
            <b-button size="sm" class="my-2 my-sm-0" type="submit">搜尋</b-button>
          </b-nav-form>
          <!--多語系切換-->
          <!--<b-nav-item-dropdown text="Lang" right>-->
          <!--<b-dropdown-item href="#">EN</b-dropdown-item>-->
          <!--<b-dropdown-item href="#">ES</b-dropdown-item>-->
          <!--<b-dropdown-item href="#">RU</b-dropdown-item>-->
          <!--<b-dropdown-item href="#">FA</b-dropdown-item>-->
          <!--</b-nav-item-dropdown>-->
          <!--使用者功能-->
          <b-nav-item-dropdown right>
            <!-- Using button-content slot -->
            <template slot="button-content">
              <em>使用者</em>
            </template>
            <b-dropdown-item href="#">個人資訊</b-dropdown-item>
            <b-dropdown-item href="#">登出</b-dropdown-item>
          </b-nav-item-dropdown>
        </b-nav>
      </b-collapse>
    </b-navbar>
    <%- body %>
    <!--footer-->
    <div></div>
  </b-container>
</div>


<!--
	Client-side Templates
	========================

	HTML templates are important prerequisites of modern, rich client applications.
	To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
	that you load these templates client-side.

	By default, your Gruntfile is configured to automatically load and precompile
	client-side JST templates in your `assets/templates` folder, then
	include them here automatically (between TEMPLATES and TEMPLATES END).

	To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
	For example, here are a few things you could do:

		+ Import templates from other directories
		+ Use a different template engine (handlebars, jade, dust, etc.)
		+ Internationalize your client-side templates using a server-side
		  stringfile before they're served.
-->

<!--TEMPLATES-->

<!--TEMPLATES END-->


<!--

  Client-side Javascript
  ========================

  You can always bring in JS files manually with `script` tags, or asynchronously
  on the client using a solution like AMD (RequireJS).  Or, if you like, you can
  take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

  By default, files in your `assets/js` folder are included here
  automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
  CoffeeScript (.coffee) are supported. In production, your scripts will be minified
  and concatenated into a single file.

  To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
  For example, here are a few things you could do:

	  + Change the order of your scripts
	  + Import scripts from other directories
	  + Use a different preprocessor, like TypeScript

-->

<!--SCRIPTS-->
<script src="/js/dependencies/sails.io.js"></script>
<script src="/js/views/Merchant/bundle.js"></script>
<script src="/js/views/Backstage/bundle.js"></script>
<!--SCRIPTS END-->
</body>
</html>
